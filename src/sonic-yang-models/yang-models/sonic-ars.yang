module sonic-ars {
    namespace "http://github.com/sonic-net/sonic-ars";
    prefix sars;
    yang-version 1.1;

    import ietf-yang-types {
        prefix yang;
    }

    import ietf-inet-types {
        prefix inet;
    }

    import sonic-types {
        prefix stypes;
    }

    import sonic-port {
        prefix port;
    }

    import sonic-portchannel {
        prefix lag;
    }

    organization
        "SONiC";

    contact
        "SONiC";

    description
        "SONIC Adaptive Routing and Switching";

    revision 2024-10-01 {
        description
            "Initial revision.";
    }

    typedef ars-match-mode-name {

        type enumeration {

            enum route-based {
               description
                 "ARS is applied when the route prefix matches the ARS_NHG_PREFIX prefix";
            }

            enum nexthop-based {
               description
                 "ARS is applied when the nexthop IPs match the ARS_NHG_MEMBER IPs";
            }
        }

        description
            "This enumeration type defines the method used to determine whether ARS should be applied.";
    }

    container sonic-ars {

        container ARS_PROFILE {

            list ARS_PROFILE_LIST {
                key "name";
                max-elements 1;

                leaf name {
                    description "ARS Profile Name";
                    type string;
                }

                leaf assign_mode {
                    type enumeration {
                        enum per_flowlet_quality{
                            description "Per flow-let assignment based on flow quality";
                        }
                        enum per_packet {
                            description "Per packet flow assignment based on port load";
                        }
                    }
                }

                leaf flowlet_idle_time {
                    type uint16;
                    default 256;
                    description  "Idle duration in microseconds. This duration is to classifying a flow-let in a macro flow.";
                }

                leaf max_flows {
                    type uint16;
                    default 512;
                    description  "Maximum number of flow states that can be maintained per profile.";
                }

                leaf match_mode{
                    type ars-match-mode-name;
                    mandatory true;
                    description " The filtering method used to identify
                    when to use Adaptive Routing on nexthop group.
                    Nexthop-based used when nexthop IPs matches ARS_NHG_MEMBER IPs.
					Route-based used when the route prefix matches the ARS_NHG_PREFIX prefix.";
                }
            }
        }

        container ARS_MIN_PATH {

            list ARS_MIN_PATH_LIST {
                description  "List of ARS interfaces pointing to minimal path";
                key "profile_name if_name";

                leaf profile_name {
                    description  "ARS Profile id";
                    type leafref {
                        path "/sars:sonic-ars/sars:ARS_PROFILE/sars:ARS_PROFILE_LIST/sars:name";
                    }
                }

                leaf if_name {
                     type union {
                        type leafref {
                            path "/port:sonic-port/port:PORT/port:PORT_LIST/port:name";
                        }
                        type leafref {
                            path "/lag:sonic-portchannel/lag:PORTCHANNEL/lag:PORTCHANNEL_LIST/lag:name";
                        }
                    }
                    description "ARS-enabled interface name";
                }
            }
        }

        container ARS_NHG_PREFIX {

            description "Route prefix to match when applying ARS over NHG";

            list ARS_NHG_PREFIX_LIST {

                key "ip_prefix";

                leaf ip_prefix{
                    type stypes:sonic-ip-prefix;
                    description "ARS_NHG_PREFIX for which ARS behavior is desired";
                }

                leaf profile_name{
                    type leafref {
                        path "/sars:sonic-ars/sars:ARS_PROFILE/sars:ARS_PROFILE_LIST/sars:name";
                    }
                    mandatory true;
                    description "ARS profile name";
                }
            }
            /* end of list ARS_NHG_PREFIX_LIST */
        }
        /* end of container ARS_NHG_PREFIX */


        container ARS_NHG_MEMBER {

            description "Nexthop member to match when applying ARS over NHG";

            list ARS_NHG_MEMBER_LIST {

                key "next_hop_ip";

                leaf next_hop_ip {
                    type inet:ip-address;
                    description "ARS_NHG next-hop-ip member associated with prefix";
                }

                leaf profile_name {
                    type leafref {
                        path "/sars:sonic-ars/sars:ARS_PROFILE/sars:ARS_PROFILE_LIST/sars:name";
                    }
                    mandatory true;
                    description "ARS profile name";
                }
            }
            /* end of list ARS_NHG_MEMBER_LIST */
        }
        /* end of container ARS_NHG_MEMBER */
    }
	/* end of container sonic-ars */
}
